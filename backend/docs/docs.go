// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@fynelo.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/companies": {
            "get": {
                "description": "List companies with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Companies"
                ],
                "summary": "List companies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Results limit (default: 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Results offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Company"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/companies/search": {
            "get": {
                "description": "Search companies with various filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Companies"
                ],
                "summary": "Search companies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query (company name, website)",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Industry filter (e.g., technology, fintech)",
                        "name": "industry",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Employee size range (e.g., 1-10, 11-50)",
                        "name": "employee_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Location filter",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Funding stage (seed, series_a, etc.)",
                        "name": "funding_stage",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Founded after year",
                        "name": "founded_min",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Founded before year",
                        "name": "founded_max",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Company status (active, closed, etc.)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Results limit (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Results offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.CompanySearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/companies/{id}": {
            "get": {
                "description": "Get a company by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Companies"
                ],
                "summary": "Get company by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Company"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/icp": {
            "post": {
                "description": "Creates a new Ideal Customer Profile for a given user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ICP"
                ],
                "summary": "Create a new ICP profile",
                "parameters": [
                    {
                        "description": "ICP Profile Data",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/icp.ICPProfile"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/icp.ICPProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/icp/user/{user_id}": {
            "get": {
                "description": "Retrieves all ICP profiles associated with a given user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ICP"
                ],
                "summary": "List all ICP profiles for a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/icp.ICPProfile"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/icp/{id}": {
            "get": {
                "description": "Fetches an ICP profile using its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ICP"
                ],
                "summary": "Get an ICP profile by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ICP ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/icp.ICPProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing ICP profile by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ICP"
                ],
                "summary": "Update an ICP profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ICP ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated ICP Profile Data",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/icp.ICPProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/icp.ICPProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an ICP profile by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ICP"
                ],
                "summary": "Delete an ICP profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ICP ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/jobs/stats": {
            "get": {
                "description": "Get current queue statistics and health",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Queue"
                ],
                "summary": "Get queue statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/jobs/user/{user_id}": {
            "get": {
                "description": "Get all jobs for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Queue"
                ],
                "summary": "Get user's jobs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/queue.SearchJob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/jobs/{id}": {
            "get": {
                "description": "Get the status of a search job by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Queue"
                ],
                "summary": "Get job status by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/queue.SearchJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "icp.ICPProfile": {
            "type": "object",
            "properties": {
                "business_type": {
                    "type": "integer"
                },
                "buyer_roles": {
                    "type": "integer"
                },
                "company_size": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "industry": {
                    "type": "string"
                },
                "problem_statement": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.Company": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "employee_size_id": {
                    "description": "Changed from EmployeeRange to use constants",
                    "type": "integer"
                },
                "founded_year": {
                    "type": "integer"
                },
                "funding_rounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FundingRound"
                    }
                },
                "hq_location": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "industry_id": {
                    "description": "Changed to int to use constants",
                    "type": "integer"
                },
                "last_enriched_at": {
                    "type": "string"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Location"
                    }
                },
                "name": {
                    "type": "string"
                },
                "revenues": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Revenue"
                    }
                },
                "source": {
                    "description": "\"manual\", \"scraped\", \"api\"",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.CompanyStatus"
                },
                "technologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Technology"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "model.CompanyStatus": {
            "type": "string",
            "enum": [
                "active",
                "closed",
                "acquired",
                "ipo",
                "private"
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusClosed",
                "StatusAcquired",
                "StatusIPO",
                "StatusPrivate"
            ]
        },
        "model.FundingRound": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "nullable for undisclosed amounts",
                    "type": "number"
                },
                "company": {
                    "$ref": "#/definitions/model.Company"
                },
                "company_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "investors": {
                    "description": "JSON string or comma-separated",
                    "type": "string"
                },
                "round_type": {
                    "$ref": "#/definitions/model.FundingRoundType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.FundingRoundType": {
            "type": "string",
            "enum": [
                "seed",
                "series_a",
                "series_b",
                "series_c",
                "series_d",
                "ipo",
                "acquisition"
            ],
            "x-enum-varnames": [
                "RoundSeed",
                "RoundSeriesA",
                "RoundSeriesB",
                "RoundSeriesC",
                "RoundSeriesD",
                "RoundIPO",
                "RoundAcquisition"
            ]
        },
        "model.Location": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "company": {
                    "$ref": "#/definitions/model.Company"
                },
                "company_id": {
                    "type": "integer"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "postal_code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Revenue": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "company": {
                    "$ref": "#/definitions/model.Company"
                },
                "company_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "USD, EUR, etc.",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "model.Technology": {
            "type": "object",
            "properties": {
                "company": {
                    "$ref": "#/definitions/model.Company"
                },
                "company_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "technology_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "queue.JobPriority": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "PriorityLow",
                "PriorityNormal",
                "PriorityHigh",
                "PriorityUrgent"
            ]
        },
        "queue.JobStatus": {
            "type": "string",
            "enum": [
                "pending",
                "processing",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusProcessing",
                "StatusCompleted",
                "StatusFailed"
            ]
        },
        "queue.SearchFilters": {
            "type": "object",
            "properties": {
                "employee_size": {
                    "type": "string"
                },
                "founded_max": {
                    "type": "integer"
                },
                "founded_min": {
                    "type": "integer"
                },
                "funding_stage": {
                    "type": "string"
                },
                "industry": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "queue.SearchJob": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "error_msg": {
                    "type": "string"
                },
                "filters": {
                    "$ref": "#/definitions/queue.SearchFilters"
                },
                "id": {
                    "type": "string"
                },
                "max_retries": {
                    "type": "integer"
                },
                "priority": {
                    "$ref": "#/definitions/queue.JobPriority"
                },
                "processed_at": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "result_count": {
                    "type": "integer"
                },
                "retry_count": {
                    "description": "For future use",
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/queue.JobStatus"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "service.CompanySearchResponse": {
            "type": "object",
            "properties": {
                "companies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Company"
                    }
                },
                "has_more": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "queued_jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.QueuedJob"
                    }
                },
                "search_time": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.QueuedJob": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Fynelo API",
	Description:      "This is the backend API for Fynelo.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
